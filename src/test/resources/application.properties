# Info
info.application.artifactId=@project.artifactId@
info.application.name=@project.name@
info.application.version=@project.version@
info.application.description=@project.description@
info.properties.environment=${ENV:azure}
# Actuator
management.endpoints.web.exposure.include=health,info
management.endpoints.jmx.exposure.include=health,info
management.info.env.enabled=true
management.endpoint.health.probes.enabled=true
management.health.livenessState.enabled=true
management.health.readinessState.enabled=true
# Openapi
springdoc.writer-with-order-by-keys=true
springdoc.writer-with-default-pretty-printer=true
# Server
server.servlet.context-path=/
server.port=8080
server.shutdown=GRACEFUL
# Logging
logging.level.root=${DEFAULT_LOGGING_LEVEL:INFO}
logging.level.it.gov.pagopa=${APP_LOGGING_LEVEL:INFO}
# CORS configuration
cors.configuration=${CORS_CONFIGURATION:{"origins": ["*"], "methods": ["*"]}}
# Mongo Configuration
spring.data.mongodb.uri=mongodb://localhost:27017/personDB
spring.data.mongodb.database=noticesMongoDb
spring.mongodb.embedded.version=3.4.3
# Cache configuration
spring.cache.type=caffeine
spring.cache.caffeine.spec=maximumSize=${CACHE_SIZE:1000}, expireAfterWrite=${CACHE_EXPIRATION_TIME:720m}
cache.enabled=${CACHE_ENABLED:true}
# Jackson serialization
spring.jackson.default-property-inclusion=NON_NULL
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.fail-on-empty-beans=false
spring.jackson.deserialization.fail-on-unknown-properties=false

pdf.engine.endpoint=${PDF_ENGINE_ENDPOINT:}
pdf.engine.ocpaim.subkey=${PDF_ENGINE_SUBKEY:}

spring.cloud.azure.storage.blob.templates.enabled=${TEMPLATE_STORAGE_ENABLED:false}
spring.cloud.azure.storage.blob.templates.connection_string=${TEMPLATE_STORAGE_CONN_STRING:}
spring.cloud.azure.storage.blob.templates.containerName=${TEMPLATE_STORAGE_CONTAINER_NAME:noticetemplateblob}
spring.cloud.azure.storage.blob.templates.retry=${TEMPLATE_STORAGE_RETRY:3}
spring.cloud.azure.storage.blob.templates.timeout=${TEMPLATE_STORAGE_TIMEOUT:10}

spring.cloud.azure.storage.blob.notices.enabled=${NOTICE_STORAGE_ENABLED:false}
spring.cloud.azure.storage.blob.notices.connection_string=${NOTICE_STORAGE_CONN_STRING:}
spring.cloud.azure.storage.blob.notices.containerName=${NOTICE_STORAGE_CONTAINER_NAME:notices}

spring.cloud.azure.storage.blob.institutions.enabled=${INSTITUTION_STORAGE_ENABLED:false}
spring.cloud.azure.storage.blob.institutions.connection_string=${INSTITUTION_STORAGE_CONN_STRING:}
spring.cloud.azure.storage.blob.institutions.containerName=${INSTITUTION_STORAGE_CONTAINER_NAME:institutionsdatablob}

# EH Kafka Configuration
spring.cloud.function.definition=noticeGeneration
spring.cloud.stream.bindings.noticeGeneration-in-0.destination=${KAFKA_NOTICE_GENERATION_TOPIC:pagopa-notice-evt-rx}
spring.cloud.stream.bindings.noticeGeneration-in-0.group=${KAFKA_NOTICE_GENERATION_GROUP_ID:notice-generation-group}
spring.cloud.stream.bindings.noticeGeneration-in-0.content-type=${KAFKA_CONTENT_TYPE:application/json}
spring.cloud.stream.bindings.noticeGeneration-in-0.binder=notice-generation
spring.cloud.stream.bindings.noticeGeneration-in-0.consumer.autoStartup=false
spring.cloud.stream.binders.notice-generation.type=kafka
spring.cloud.stream.binders.notice-generation.environment.spring.cloud.stream.kafka.binder.brokers=${KAFKA_BROKER:localhost:9092}
spring.cloud.stream.binders.notice-generation.environment.spring.cloud.stream.kafka.binder.configuration.sasl.jaas.config=${KAFKA_SASL_JAAS_CONFIG:}
spring.cloud.stream.binders.notice-generation.environment.spring.cloud.stream.kafka.binder.configuration.key.serializer=org.apache.kafka.common.serialization.StringSerializer
spring.cloud.stream.kafka.binder.auto-create-topics=false
spring.cloud.stream.kafka.binder.configuration.heartbeat.interval.ms=${KAFKA_CONFIG_HEARTBEAT_INTERVAL_MS:3000}
spring.cloud.stream.kafka.binder.configuration.session.timeout.ms=${KAFKA_CONFIG_SESSION_TIMEOUT_MS:60000}
spring.cloud.stream.kafka.binder.configuration.request.timeout.ms=${KAFKA_CONFIG_REQUEST_TIMEOUT_MS:60000}
spring.cloud.stream.kafka.binder.configuration.sasl.mechanism=${KAFKA_CONFIG_SASL_MECHANISM:PLAIN}
spring.cloud.stream.kafka.binder.configuration.security.protocol=${KAFKA_CONFIG_SECURITY_PROTOCOL:SASL_SSL}
spring.cloud.stream.kafka.binder.configuration.connections.max.idle.ms=${KAFKA_CONFIG_CONNECTION_MAX_IDLE_TIME:180000}
spring.cloud.stream.kafka.binder.configuration.metadata.max.idle.ms=${KAFKA_CONFIG_METADATA_MAX_IDLE_MS:180000}
spring.cloud.stream.kafka.binder.configuration.metadata.max.age.ms=${KAFKA_CONFIG_METADATA_MAX_AGE_INTERVAL:179000}
spring.cloud.stream.kafka.binder.configuration.max.request.size=${KAFKA_CONFIG_METADATA_MAX_REQUEST_SIZE:1000000}
spring.cloud.stream.kafka.bindings.noticeGeneration-in-0.consumer.startOffset=${KAFKA_CONSUMER_CONFIG_START_OFFSET:earliest}
spring.cloud.stream.kafka.bindings.noticeGeneration-in-0.consumer.autoCommitOffset=false
spring.cloud.stream.kafka.bindings.noticeGeneration-in-0.consumer.ackMode=MANUAL_IMMEDIATE
spring.cloud.stream.kafka.bindings.noticeGeneration-in-0.consumer.ackTime=${KAFKA_TRANSACTION_USER_ID_SPLITTER_ACK_MILLIS:500}
spring.cloud.stream.kafka.bindings.noticeGeneration-in-0.consumer.standardHeaders=${KAFKA_CONSUMER_CONFIG_STANDARD_HEADERS:both}
spring.cloud.stream.kafka.bindings.noticeGeneration-in-0.consumer.configuration.max.poll.records=${KAFKA_CONSUMER_CONFIG_MAX_POLL_SIZE:500}
spring.cloud.stream.kafka.bindings.noticeGeneration-in-0.consumer.configuration.max.poll.interval.ms=${KAFKA_CONFIG_MAX_POLL_INTERVAL_TIMEOUT_MS:300000}
spring.cloud.stream.kafka.bindings.noticeGeneration-in-0.consumer.configuration.connections.max.idle.ms=${KAFKA_CONSUMER_CONFIG_CONNECTIONS_MAX_IDLE_MS:180000}
spring.cloud.stream.kafka.bindings.noticeGeneration-in-0.consumer.configuration.socket.connection.setup.timeout.max.ms=${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MAX_MS:200000}
spring.cloud.stream.kafka.bindings.noticeGeneration-in-0.consumer.configuration.socket.connection.setup.timeout.ms=${KAFKA_CONSUMER_CONFIG_CONNECTION_TIMEOUT_MS:100000}

#Other Configs
aes.secret.key=${AES_SECRET_KEY:}
aes.salt=${AES_SALT:}

